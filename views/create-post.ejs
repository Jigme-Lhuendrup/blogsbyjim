<div class="container mx-auto px-4 py-8 max-w-2xl">
    <div class="bg-white rounded-lg shadow-lg p-8" style="background-color: rgba(255, 255, 255, 0.9);">
        <div class="flex items-center space-x-4 mb-8">
            <div class="w-14 h-14 rounded-full bg-gray-300 flex items-center justify-center">
                <i class="fas fa-user text-gray-600 text-xl"></i>
            </div>
            <h2 class="text-2xl font-special-elite"><%= username %></h2>
        </div>

        <% if (typeof error !== 'undefined' && error) { %>
        <div class="mb-8 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <span class="block sm:inline"><%= error %></span>
        </div>
        <% } %>

        <form action="/posts" method="POST" enctype="multipart/form-data" class="space-y-8">
            <div class="space-y-2">
                <label for="title" class="block text-gray-700 font-medium">Title</label>
                <input type="text" id="title" name="title" 
                    placeholder="Give your post a title" 
                    value="<%= typeof formData !== 'undefined' ? formData.title : '' %>"
                    required
                    class="w-full px-4 py-3 text-lg border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
            </div>
            
            <div class="space-y-2">
                <label for="content" class="block text-gray-700 font-medium">Content</label>
                <textarea id="content" name="content" rows="6" 
                    placeholder="What's on your mind?" 
                    required
                    class="w-full px-4 py-3 text-lg border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"><%= typeof formData !== 'undefined' ? formData.content : '' %></textarea>
            </div>

            <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                <input type="file" id="imageInput" name="image" accept="image/*" class="hidden">
                <div id="dropArea" class="cursor-pointer space-y-4" onclick="document.getElementById('imageInput').click()">
                    <i class="fas fa-image text-5xl text-gray-400"></i>
                    <div>
                        <p class="text-lg text-gray-600 font-medium">Click to add an image</p>
                        <p class="text-sm text-gray-500">or drag and drop your image here</p>
                    </div>
                </div>
                <div id="imagePreview" class="mt-6 hidden">
                    <img src="" alt="Preview" class="max-h-96 mx-auto rounded-lg shadow-lg">
                    <button type="button" onclick="removeImage()" class="mt-4 text-red-500 hover:text-red-700">
                        <i class="fas fa-times mr-2"></i>Remove Image
                    </button>
                </div>
            </div>

            <div class="flex justify-end space-x-4 pt-4">
                <a href="/home" 
                    class="px-8 py-3 border-2 border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium">
                    Cancel
                </a>
                <button type="submit"
                    class="px-8 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium">
                    Post
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    const dropArea = document.getElementById('dropArea');
    const imageInput = document.getElementById('imageInput');
    const imagePreview = document.getElementById('imagePreview');
    const previewImg = imagePreview.querySelector('img');

    // Handle drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
        dropArea.classList.add('bg-gray-100');
    }

    function unhighlight(e) {
        dropArea.classList.remove('bg-gray-100');
    }

    dropArea.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        imageInput.files = files;
        handleFiles(files);
    }

    imageInput.addEventListener('change', function() {
        handleFiles(this.files);
    });

    function handleFiles(files) {
        if (files.length > 0) {
            const file = files[0];
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImg.src = e.target.result;
                    imagePreview.classList.remove('hidden');
                    dropArea.classList.add('hidden');
                }
                reader.readAsDataURL(file);
            }
        }
    }

    function removeImage() {
        imageInput.value = '';
        imagePreview.classList.add('hidden');
        dropArea.classList.remove('hidden');
    }
</script> 